import json
import random
import sqlite3
import requests
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup


bot_token = '1668667352:AAFrZwLvR7j7ma-pKdFVPLpIH-D4Az27EcU' 

bot = Bot(token=bot_token)

dp = Dispatcher(bot, storage=MemoryStorage())

publick_key = '48e7qUxn9T7RyYE1MVZswX1FRSbE6iyCj2gCRwwF3Dnh5XrasNTx3BGPiMsyXQFNKQhvukniQG8RTVhYm3iPvYSzQ64FZjixcDeu2q7hHfro7svdtjdhNuH22R3XtCDyEfheNTshUv9AwP6mc9sAj43p8AP89K2v33JEM6STfm8aDF7xagDERR92MBDnx' 

token = 'aa83a01cd8b3d5c0bfebcc48dc161b0b' 

phone = '+380974845941' 

help_message = '''–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n@favorit_betting'''

admins = [1546170311,1464117623,1412541991]

card = '4890494729256032' #–∫–∞—Ä—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É

cardua = '4890494729256032'

start_message = """
üéâ–ü—Ä–∏–≤–µ—Ç, {}

–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º:
1. –ò–≥—Ä–∞—è —É –Ω–∞—Å, –≤—ã –±–µ—Ä—ë—Ç–µ –≤—Å–µ —Ä–∏—Å–∫–∏ –∑–∞ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–µ–±—è.
2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ!
3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/–æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã!
4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!
5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!
6. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!
7. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –í–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –í–∞—à–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.
MoneyBot
–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –ø–æ–∫—É–ø–∞—è –∏—Ö –∑–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏. –õ—é–±–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º!  –í—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞, –≤ 5 —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ —Å —Å—É–º–º—É –í–∞—à–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å–∞–º –∏–≥—Ä–∞–º –æ–±–æ–≥–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –±–æ—Ç—É. –ü–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É, –∞ –Ω–µ ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –¢—É—Ç?¬ª
–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ –º—É—á–∞–ª–∞—Å—å –∏ –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –í–∞—Å –ø–æ–Ω—è—Ç—å.
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!
–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å, –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤—ã–ø–∞–¥—à–µ–µ —á–∏—Å–ª–æ. 
–û—Ç 0 –¥–æ 50, –ª–∏–±–æ –æ—Ç 50 –¥–æ 100, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–æ–≤–µ–Ω–∏–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏, –ª–∏–±–æ –∂–µ –µ—Å–ª–∏ –í–∞—à–µ —á–∏—Å–ª–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 50, —Ç–æ —Ç–æ–≥–¥–∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã–∏–≥—Ä—ã—à —Ä–∞–≤–Ω—ã–π 10 –í–∞—à–∏–º —Å—Ç–∞–≤–∫–∞–º. –ù–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞–º–Ω–æ–≥–æ –Ω–∏–∂–µ.

–£–¥–∞—á–∏!
"""

profile_button = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíº')

help_button = types.KeyboardButton('–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞üåé')

games_button = types.KeyboardButton('–ò–≥—Ä—ãüéÆ')

settings_button = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏üîß')




main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(games_button)

main_keyboard.add(profile_button,settings_button)

main_keyboard.add(help_button)

crash_button = types.KeyboardButton('Crashüìâ')

coin_button = types.KeyboardButton('–ú–æ–Ω–µ—Ç–∫–∞üé≤')

casino_button = types.KeyboardButton('–†—É–ª–µ—Ç–∫–∞üíà')

back_button = types.KeyboardButton('–ù–∞–∑–∞–¥‚óÄÔ∏è')

games_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
    crash_button,coin_button,casino_button
)

games_keyboard.row(back_button) 

addbalance_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')

mode_button = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å')

delete_button = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞')

worker_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(addbalance_button).add(mode_button).add(delete_button).row(back_button)

payment = types.KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí∞')

get_money = types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏üí∏')

profile_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(payment,get_money)

profile_keyboard.row(back_button)

welcome_keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ‚úÖ', callback_data='access_sog'))


class payment(StatesGroup):
    summ = State()


class payment_card(StatesGroup):
    summ = State()

class crash(StatesGroup):
    summ = State()
    crash_coefficient = State()

class coin(StatesGroup):
    summ = State()
    choice = State()

class mode(StatesGroup):
    telegram_id = State()
    mode_id = State()


class roulette(StatesGroup):
    summ = State()
    choice = State()

class change_balance(StatesGroup):
    telegram_id = State()
    amount = State()

class deletefrom_user(StatesGroup):
    user_id = State()
    
    
class get_money(StatesGroup):
    money = State()
    payment_choice = State()
    payment_info = State()



def new_user(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    query = f"""SELECT * from users WHERE telegram_id={telegram_id}"""
    cursor.execute(query)
    check = cursor.fetchall()
    if check:
        pass
    else:
        cursor.execute("""INSERT INTO users
                    VALUES (?,?,?,?,?,?,?,?)""",(telegram_id, "ru", 1, "1", 0, 0, 1, 0)
        )
        conn.commit()
        return 'new user'


def get_balance(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,balance FROM users"):
        user_id = row[0]
        if user_id == telegram_id:
            balance = row[1]
            return balance


def new_payment(telegram_id,comment,payment_sum):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET comment = ? WHERE telegram_id = ?;', (comment, telegram_id))
    cursor.execute(f'UPDATE users SET payment_sum = ? WHERE telegram_id = ?;', (payment_sum, telegram_id))
    conn.commit()

def get_data(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,comment,payment_sum FROM users"):
        user_id = row[0]
        if user_id == telegram_id:
            comment = row[1]
            amount = row[2]
            return comment, amount
        
        
def get_promo(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        user_id = row[0]
        if user_id == telegram_id:
            promo = row[1]
            return promo
    
        
def add_promo(telegram_id, promo):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        user_id = row[0]
        if int(user_id) == int(telegram_id):
            user_promo = row[1]
            if int(user_promo) == 1 and telegram_id != promo:
                cursor.execute(f'UPDATE users SET promo = ? WHERE telegram_id = ?;', (promo, telegram_id))
                conn.commit()
                return 'good'
            else:
                return 'error'


def add_balance(telegram_id, amount):    
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,balance FROM users"):
        user_id = row[0]
        if int(user_id) == int(telegram_id):
            balance = row[1]
            addbalance = int(balance) + int(amount)
            cursor.execute(f'UPDATE users SET balance = ? WHERE telegram_id = ?;', (addbalance, telegram_id))
            conn.commit()



def pick_money(telegram_id, amount):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,balance FROM users"):
        user_id = row[0]
        if user_id == int(telegram_id):
            balance = row[1]
            addbalance = int(balance) - int(amount)
            cursor.execute(f'UPDATE users SET balance = ? WHERE telegram_id = ?;', (addbalance, telegram_id))
            conn.commit()


def regenerate_code(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    code = str(random.randint(1000, 10000)) + str(random.choices('qwertyuiop[asdfghjkl', k=8))
    cursor.execute(f'UPDATE users SET comment = ? WHERE telegram_id = ?;', (code, telegram_id))
    conn.commit()


def get_modeuser(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,mode FROM users"):
        user_id = row[0]
        if user_id == telegram_id:
            mode = row[1]
            return mode

def addmoney_referals(telegram_id, amount):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        user_id = row[0]
        if user_id == telegram_id:
            user_promo = row[1]
            if int(user_promo) != 1 and int(telegram_id) != int(user_promo):
                return user_promo
            else:
                return 'not ref'


def set_mode(telegram_id, mode):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET mode = ? WHERE telegram_id = ?;', (mode, telegram_id))
    conn.commit()


def get_referals(telegram_id, promo):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    referals = 0
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        ref_promo = row[1]
        if ref_promo == promo:
            referals += 1
    if referals != None:
        return referals
    elif referals == None:
        return 0


            
            
def change_currency(telegram_id, currency):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET currency = ? WHERE telegram_id = ?;', (currency, telegram_id))
    conn.commit()

def get_currency(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,currency FROM users"):
        user_id = row[0]
        if user_id == telegram_id:
            currency = row[1]
            return currency

def change_balance_user(telegram_id, amount):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,balance FROM users"):
        user_id = row[0]
        if int(user_id) == int(telegram_id):
            balance = row[1]
            cursor.execute(f'UPDATE users SET balance = ? WHERE telegram_id = ?;', (amount, telegram_id))
            conn.commit()


def new_worker(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(f'UPDATE users SET worker = ? WHERE telegram_id = ?;', (1, telegram_id))
    conn.commit()

def isworker(telegram_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,worker FROM users"):
        user_id = row[0]
        if int(user_id) == int(telegram_id):
            worker = row[1]
            return worker



@dp.message_handler(commands=['start'])
async def start_func(message: types.Message):
    ref_code = (message.text[7:])
    if ref_code != '':
        check = new_user(message.chat.id)
        if check == 'new user':
            await bot.send_message(message.chat.id, start_message.format(message.from_user.first_name), reply_markup=welcome_keyboard)
            add_promo(message.chat.id, ref_code)
        else:
            balance = get_balance(message.chat.id)
            online = random.randint(400, 460)
            currency = get_currency(message.chat.id)
            if currency == 'ru':
                await bot.send_message(message.chat.id, f'üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å üíµ {balance} —Ä\nüíé –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {get_referals(message.chat.id, message.chat.id)}\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttp://t.me/favoritbet_bot?start={message.chat.id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: {online}', reply_markup=profile_keyboard)
            elif currency == 'ua':
                await bot.send_message(message.chat.id, f'üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å üíµ {balance} –ì—Ä–Ω\nüíé –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {get_referals(message.chat.id, message.chat.id)}\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttp://t.me/favoritbet_bot?start={message.chat.id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: {online}', reply_markup=profile_keyboard)     
    else:
        check = new_user(message.chat.id)
        if check == 'new user':
            await bot.send_message(message.chat.id, start_message.format(message.from_user.first_name), reply_markup=welcome_keyboard)
        else:
            balance = get_balance(message.chat.id)
            online = random.randint(400, 460)
            currency = get_currency(message.chat.id)
            if currency == 'ru':
                await bot.send_message(message.chat.id, f'üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å üíµ {balance} —Ä\nüíé –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {get_referals(message.chat.id, message.chat.id)}\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttp://t.me/favoritbet_bot?start={message.chat.id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: {online}', reply_markup=profile_keyboard)
            elif currency == 'ua':
                await bot.send_message(message.chat.id, f'üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å üíµ {balance} –ì—Ä–Ω\nüíé –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {get_referals(message.chat.id, message.chat.id)}\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttp://t.me/favoritbet_bot?start={message.chat.id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: {online}', reply_markup=profile_keyboard)


@dp.callback_query_handler(text='access_sog')
async def next_choice(query: types.CallbackQuery):
    message_id = query.message.message_id
    await bot.delete_message(query.message.chat.id,  message_id)
    currency_ru = types.KeyboardButton('RUBüá∑üá∫')
    currency_ua = types.KeyboardButton('UAHüá∫üá¶')
    currenct_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row(currency_ru).row(currency_ua)
    await bot.send_message(query.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éüí∂', reply_markup=currenct_keyboard)

@dp.message_handler(text='–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞üåé')
async def help_func(message: types.Message):
    await bot.send_message(message.chat.id, help_message, reply_markup=main_keyboard)

@dp.message_handler(text='–ü—Ä–æ—Ñ–∏–ª—åüíº')
async def balance_user(message: types.Message):
    balance = get_balance(message.chat.id)
    online = random.randint(400, 460)
    currency = get_currency(message.chat.id)
    if currency == 'ru':
        await bot.send_message(message.chat.id, f'üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å üíµ {balance} —Ä\nüíé –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {get_referals(message.chat.id, message.chat.id)}\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttp://t.me/favoritbet_bot?start={message.chat.id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: {online}', reply_markup=profile_keyboard)
    elif currency == 'ua':
        await bot.send_message(message.chat.id, f'üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å üíµ {balance} –ì—Ä–Ω\nüíé –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {get_referals(message.chat.id, message.chat.id)}\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttp://t.me/favoritbet_bot?start={message.chat.id}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: {online}', reply_markup=profile_keyboard)



@dp.message_handler(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏üîß')
async def settings_func(message: types.Message):
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥‚óÄÔ∏è')
    currecy_button = types.KeyboardButton('üíµ–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—Éüí∂')
    settings_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(currecy_button)
    settings_keyboard.add(back_button)
    await bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É', reply_markup=settings_keyboard)


@dp.message_handler(text='üíµ–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—Éüí∂')
async def change_currency_func(message: types.Message):
    currency_ru = types.KeyboardButton('RUBüá∑üá∫')
    currency_ua = types.KeyboardButton('UAHüá∫üá¶')
    currenct_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row(currency_ru).row(currency_ua)
    await bot.send_message(message.chat.id, 'üîô –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=currenct_keyboard)


@dp.message_handler(text='–í—ã–≤–µ—Å—Ç–∏üí∏', state="*")
async def get_money_func(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞.')
    await get_money.money.set()

@dp.message_handler(state=get_money.money, content_types=types.ContentTypes.TEXT)
async def get_amount_money(message: types.Message, state: FSMContext):
    await state.update_data(money=message.text)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤—ã–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö!\n\n1)–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n2)QIWI –∫–æ—à–µ–ª–µ–∫\n–î–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É, –ø–æ–¥ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑–∞–Ω–∞ –Ω—É–∂–Ω–∞—è –í–∞–º —Å–∏—Å—Ç–µ–º–∞.')
    await get_money.payment_info.set()


@dp.message_handler(state=get_money.payment_info, content_types=types.ContentTypes.TEXT)
async def get_payment_choice(message: types.Message, state: FSMContext):
    await state.update_data(payment_choice=message.text)
    payment = await state.get_data()
    if payment['payment_choice'] != '':
        balance = get_balance(message.chat.id)
        money = payment['money']
        if int(money) <= int(balance):
            await bot.send_message(message.chat.id, f'‚ö†Ô∏è–í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –í–∞—à –±–∞–ª–∞–Ω—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑!‚ö†Ô∏è\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ!', reply_markup=main_keyboard)
            pick_money(message.chat.id, money)
            await state.finish()
        elif int(money) > int(balance):
            await bot.send_message(message.chat.id, f'–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥‚ö†Ô∏è', reply_markup=main_keyboard)
            await state.finish()    
    
    

@dp.message_handler(text='RUBüá∑üá∫')
async def chance_curencyru(message: types.Message):
    await bot.send_message(message.chat.id, '–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: RUB', reply_markup=main_keyboard)
    change_currency(message.chat.id, 'ru')


@dp.message_handler(text='UAHüá∫üá¶')
async def change_curencyua(message: types.Message):
    await bot.send_message(message.chat.id, '–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: UAH', reply_markup=main_keyboard)
    change_currency(message.chat.id, 'ua')


@dp.message_handler(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí∞', state="*")
async def payment_balance(message: types.Message):
    currency = get_currency(message.chat.id)
    if currency == 'ru':
        qiwi_button = types.KeyboardButton('Qiwi')
        card = types.KeyboardButton('–ö–∞—Ä—Ç–∞')
        payments_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(qiwi_button).add(card)
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=payments_keyboard)
    elif currency == 'ua':
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n–ü—Ä–∏–º–µ—Ä: 100, 200, 500, 1000\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 15000', reply_markup=main_keyboard)
        await payment.summ.set()


@dp.message_handler(text='Qiwi', state="*")
async def qiwi_payment(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n–ü—Ä–∏–º–µ—Ä: 100, 200, 500, 1000\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 15000', reply_markup=main_keyboard)
    await payment.summ.set()



@dp.message_handler(text='–ö–∞—Ä—Ç–∞', state="*")
async def card_payment(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n–ü—Ä–∏–º–µ—Ä: 100, 200, 500, 1000\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 15000', reply_markup=main_keyboard)
    await payment_card.summ.set()



@dp.message_handler(state=payment_card.summ, content_types=types.ContentTypes.TEXT)
async def payment_card_ru(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(summ=message.text)
        await bot.send_message(message.chat.id, f'‚ôªÔ∏è–û–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É {card}\n\n–í–ê–ñ–ù–û!–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.chat.id}\n–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á—ë—Ç!\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
        await state.finish()
           

@dp.message_handler(state=payment.summ, content_types=types.ContentTypes.TEXT)
async def get_sum(message: types.Message, state: FSMContext):
    currency = get_currency(message.chat.id)
    if currency == 'ru':
        try:
            int(message.text)
            await state.update_data(summ=message.text)
            try:
                inviter = get_promo(message.chat.id)
                first_name = message['from_user']['first_name']
                username = message['from_user']['username']
                await bot.send_message(inviter, f'–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {message.text}—Ä—É–±\n–ú–∞–º–æ–Ω—Ç {first_name}|@{username}')
            except:
                pass
            payment = await state.get_data()
            comment = ''.join(random.choices('qwertyuiopsdfghjkl;zxcvbnm',k=10)) + str(random.randint(1, 1000))
            s = requests.Session()
            s.headers['authorization'] = 'Bearer' + token
            amount = payment['summ']
            parameters = {'publicKey':publick_key,'amount':amount,'phone':phone,'comment':comment}
            h = s.get('https://oplata.qiwi.com/create', params = parameters)
            payment_button = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—åüí≥', url=h.url)
            keyboard_pay = types.InlineKeyboardMarkup().add(payment_button)
            await bot.send_message(message.chat.id, '–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=keyboard_pay)
            await state.finish()
            new_payment(message.chat.id, comment, amount) 
        except ValueError:
            await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
            await state.finish()
    elif currency == 'ua': 
        try:
            int(message.text)
            await state.update_data(summ=message.text)
            try:
                inviter = get_promo(message.chat.id)
                first_name = message['from_user']['first_name']
                user_name = message['from_user']['username']
                await bot.send_message(inviter, f'–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {message.text}—Ä—É–±\n–ú–∞–º–æ–Ω—Ç {first_name}|@{username}')
            except:
                pass
            payment = await state.get_data()
            amount = payment['summ']
            await bot.send_message(message.chat.id, f'‚ôªÔ∏è–û–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É {cardua}\n\n–í–ê–ñ–ù–û!–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.chat.id}\n–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á—ë—Ç!\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É')
            await state.finish()
        except ValueError:
            await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
            await state.finish()



@dp.message_handler(text='–ò–≥—Ä—ãüéÆ')
async def games_func(message: types.Message):
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É', reply_markup=games_keyboard)

@dp.message_handler(text='Crashüìâ', state="*")
async def crash_func(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏', reply_markup=main_keyboard)
    await crash.summ.set()

@dp.message_handler(text='–ú–æ–Ω–µ—Ç–∫–∞üé≤', state='*')
async def coin_game(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏', reply_markup=main_keyboard)
    await coin.summ.set()

@dp.message_handler(text='–†—É–ª–µ—Ç–∫–∞üíà', state='*')
async def roulette_game(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏', reply_markup=main_keyboard)
    await roulette.summ.set()

@dp.message_handler(state=roulette.summ, content_types=types.ContentTypes.TEXT)
async def get_summ_roulette(message: types.Message, state: FSMContext):
    choice_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('= 50'),types.KeyboardButton('> 50'),types.KeyboardButton('< 50'))
    await state.update_data(summ=message.text)
    await bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å –≤—ã–ø–∞–¥–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥ —Å–æ–±—ã—Ç–∏—è\n\n1.< 50 - 2x\n2.= 50 - x10\n3.> 50 - 2x', reply_markup=choice_keyboard)
    await roulette.choice.set()



@dp.message_handler(state=roulette.choice, content_types=types.ContentTypes.TEXT)
async def get_choice_roulette(message: types.Message, state: FSMContext):
    await state.update_data(choice=message.text)
    info = await state.get_data()
    money = info['summ']
    choice = info['choice']
    if choice == "1":
        win_sum = int(money) * 2
        choice = random.randint(1, 49)
    elif choice == "2":
        win_sum = int(money) * 10
        choice = '50'
    elif choice == "3":
        win_sum = int(money) * 2
        choice = random.randint(51, 99)
    balance = get_balance(message.chat.id)
    await state.finish()
    try:
        if int(money) <= balance:
            mode = get_modeuser(message.chat.id)
            if mode:
                await bot.send_message(message.chat.id, f'–í—ã–ø–∞–ª–æ {choice}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_sum}üéâ', reply_markup=main_keyboard)
                add_balance(message.chat.id, win_sum)
            elif mode == 2:
                await bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {money}üò©', reply_markup=main_keyboard)
                pick_money(message.chat.id, money)
            elif mode == 0:
                coff = random.randint(2, 5)
                if coff == 2:
                    await bot.send_message(message.chat.id, f'–í—ã–ø–∞–ª–æ {choice}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_sum}üéâ', reply_markup=main_keyboard)
                    add_balance(message.chat.id, win_sum)
                if coff != 2:
                    await bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {money}üò©', reply_markup=main_keyboard)
                    pick_money(message.chat.id, money)
        elif int(money) > balance:
            await bot.send_message(message.chat.id, '–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!', reply_markup=main_keyboard)
    except ValueError:
        await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ', reply_markup=main_keyboard)  
    
        


@dp.message_handler(state=coin.summ, content_types=types.ContentTypes.TEXT)
async def get_money_coin(message: types.Message, state: FSMContext):
    await state.update_data(summ=message.text)
    await bot.send_message(message.chat.id, '–ù–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç–µ?\n1 - —Ä–µ—à–∫–∞\n2 - –æ—Ä—ë–ª')
    await coin.choice.set()

@dp.message_handler(state=coin.choice, content_types=types.ContentTypes.TEXT)
async def get_choice_coin(message: types.Message,  state: FSMContext):
    await state.update_data(choice=message.text)
    info = await state.get_data()
    money = info['summ']
    balance = get_balance(message.chat.id)
    await state.finish()
    try:
        if int(money) <= balance:
            mode = get_modeuser(message.chat.id)
            win_sum = int(money) * 2
            if mode: #—Ç–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä—ã—à
                await bot.send_message(message.chat.id, f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_sum}üéâ', reply_markup=main_keyboard)
                add_balance(message.chat.id, win_sum)
            elif mode == 2: #—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–≥—Ä—ã—à
                await bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {money}üò©', reply_markup=main_keyboard)
                pick_money(message.chat.id, money)
            elif mode == 0: #—Ä–∞–Ω–¥–æ–º
                win = random.randint(1, 2)
                if win:
                    await bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {money}üò©', reply_markup=main_keyboard)
                    pick_money(message.chat.id, money)
                elif win == 2:
                    await bot.send_message(message.chat.id, f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_sum}üéâ', reply_markup=main_keyboard)
                    add_balance(message.chat.id, win_sum)
        else:
            await bot.send_message(message.chat.id, '–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!', reply_markup=main_keyboard) 
    except ValueError:
        await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ', reply_markup=main_keyboard)  
    
    
@dp.message_handler(text='–ù–∞–∑–∞–¥‚óÄÔ∏è')
async def back_menu(message: types.Message):
    await bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö', reply_markup=main_keyboard)



@dp.message_handler(state=crash.summ, content_types=types.ContentTypes.TEXT)
async def get_sum(message: types.Message, state: FSMContext):
    await state.update_data(summ=message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç crash.')
    await crash.crash_coefficient.set()


@dp.message_handler(state=crash.crash_coefficient, content_types=types.ContentTypes.TEXT)
async def generate_win(message: types.Message,  state: FSMContext):
    await state.update_data(crash_coefficient=message.text)
    info = await state.get_data()
    money = info['summ']
    balance = get_balance(message.chat.id)
    try:
        if int(money) <= balance:
            coefficient = info['crash_coefficient']
            win_sum = int(money) * int(coefficient)
            await state.finish()
            await bot.send_message(message.chat.id, f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {money} üí∏\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient}üìà\n–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–π–≥—Ä—ã—à {win_sum} üìä', reply_markup=main_keyboard)
            mode = get_modeuser(message.chat.id)
            if mode: #—Ç–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä—ã—à
                await bot.send_message(message.chat.id, f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_sum}üéâ', reply_markup=main_keyboard)
                add_balance(message.chat.id, win_sum)
            elif mode == 2: #—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–≥—Ä—ã—à
                await bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {money}üò©', reply_markup=main_keyboard)
                pick_money(message.chat.id, money)
            elif mode == 0: #—Ä–∞–Ω–¥–æ–º
                win = random.randint(1, 2)
                if win:
                    await bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {money}üò©', reply_markup=main_keyboard)
                    pick_money(message.chat.id, money)
                elif win == 2:
                    await bot.send_message(message.chat.id, f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_sum}üéâ', reply_markup=main_keyboard)
                    add_balance(message.chat.id, win_sum)
        
        else:
            await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!', reply_markup=main_keyboard)
            await state.finish()
    except ValueError:  
        await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ', reply_markup=main_keyboard)     



    
@dp.message_handler(text='–í–æ—Ä–∫–µ—Ä')
async def menu_worker(message: types.Message):
    check = isworker(message.chat.id)
    if check:
        await bot.send_message(message.chat.id, '–í—ã –≤–æ—à–ª–∏ –≤ –≤–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å!', reply_markup=worker_keyboard)
    else:
        await bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.', reply_markup=main_keyboard)


@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', state="*")
async def add_balance_user(message: types.Message, state: FSMContext):
    ref_list = []
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        promo = row[1]
        if promo == message.chat.id:
            telegram_id = row[0]
            first_name = message['from_user']['first_name']
            last_name = message['from_user']['last_name']
            username = message['from_user']['username']
            ref_list.append(f'\n({telegram_id},{first_name}|{last_name}|{username},{get_balance(telegram_id)},{get_modeuser(telegram_id)})')
    ids = '\n'.join(ref_list)
    try:
        await bot.send_message(message.chat.id, f'{ids}', reply_markup=worker_keyboard)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=worker_keyboard)
        await change_balance.telegram_id.set()
    except:

        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!', reply_markup=worker_keyboard)


@dp.message_handler(state=change_balance.telegram_id, content_types=types.ContentTypes.TEXT)
async def get_telegram_id(message: types.Message, state: FSMContext):
    await state.update_data(telegram_id=message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.', reply_markup=worker_keyboard)
    await change_balance.amount.set()


@dp.message_handler(state=change_balance.amount, content_types=types.ContentTypes.TEXT)
async def get_amount_balance(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)
    try:
        info = await state.get_data()
        telegram_id = info['telegram_id']
        amount = info['amount']
        int(amount)
        change_balance_user(telegram_id, amount)
        await state.finish()
        await bot.send_message(message.chat.id, f'–°—É–º–º–∞ {amount} –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=worker_keyboard)
    except ValueError:
        await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
        await state.finish()

@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', state="*")
async def chance_mode(message: types.Message, state: FSMContext):
    ref_list = []
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        promo = row[1]
        if promo == message.chat.id:
            telegram_id = row[0]
            first_name = message['from_user']['first_name']
            last_name = message['from_user']['last_name']
            username = message['from_user']['username']
            ref_list.append(f'\n({telegram_id},{first_name}|{last_name}|{username},{get_balance(telegram_id)},{get_modeuser(telegram_id)})')
    ids = '\n'.join(ref_list)
    try:
        await bot.send_message(message.chat.id, f'{ids}', reply_markup=worker_keyboard)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã.', reply_markup=worker_keyboard)
        await mode.telegram_id.set()
    except:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!', reply_markup=worker_keyboard)
        await state.finish()

@dp.message_handler(state=mode.telegram_id, content_types=types.ContentTypes.TEXT)
async def get_telegram_id(message: types.Message, state: FSMContext):
    await state.update_data(telegram_id=message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã\n1 - –≤—ã–∏–≥—Ä—ã—à\n2 - –ø—Ä–æ–∏–≥—Ä—ã—à\n0 - —Ä–∞–Ω–¥–æ–º', reply_markup=worker_keyboard)
    await mode.mode_id.set()

@dp.message_handler(state=mode.mode_id, content_types=types.ContentTypes.TEXT)
async def get_mode(message: types.Message, state: FSMContext):
    try:
        await state.update_data(mode_id=message.text)
        info = await state.get_data()
        telegram_id = info['telegram_id']
        mode = info['mode_id']
        int(message.text)
        await bot.send_message(message.chat.id, f'–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –∏–≥—Ä—ã {mode}')
        set_mode(telegram_id, mode)
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!', reply_markup=worker_keyboard)

@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞', state="*")
async def delete_user(message: types.Message):
    ref_list = []
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        promo = row[1]
        if promo == message.chat.id:
            telegram_id = row[0]
            first_name = message['from_user']['first_name']
            last_name = message['from_user']['last_name']
            username = message['from_user']['username']
            ref_list.append(f'\n({telegram_id},{first_name}|{last_name}|{username},{get_balance(telegram_id)},{get_modeuser(telegram_id)})')
    ids = '\n'.join(ref_list)
    try:
        await bot.send_message(message.chat.id, f'{ids}', reply_markup=worker_keyboard)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –º–∞–º–æ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=worker_keyboard)
        await change_balance.telegram_id.set()
    except:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!', reply_markup=worker_keyboard)


@dp.message_handler(state=deletefrom_user.user_id, content_types=types.ContentTypes.TEXT)
async def get_telegramid_user(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    info = await state.get_data()
    telegram_id = info['user_id']
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    for row in cursor.execute("SELECT telegram_id,promo FROM users"):
        user_id = row[0]
        if int(user_id) == int(telegram_id):
            user_promo = row[1]
            cursor.execute(f'UPDATE users SET promo = ? WHERE telegram_id = ?;', (1, telegram_id))
            conn.commit()
    await bot.send_message(message.chat.id, '–ú–∞–º–æ–Ω—Ç —É–¥–∞–ª–µ–Ω!', reply_markup=worker_keyboard)
    await state.finish()


@dp.message_handler()
async def command_handler(message: types.Message):
    if "/worker" in message.text and message.chat.id in admins:
        telegram_id = message.text.replace('/worker', '').replace(' ', '')
        new_worker(telegram_id)




executor.start_polling(dp)

